// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Thank you for sharing your experience! It's very helpful.",
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3557),
                            PostId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Content = "I'm glad you found it helpful! Feel free to ask any questions.",
                            CreatedAt = new DateTime(2025, 3, 14, 23, 19, 14, 719, DateTimeKind.Local).AddTicks(3559),
                            PostId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FAQs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "At 12 weeks, the average fetal weight is between 14 and 20 grams.",
                            Category = "Fetal Development",
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3507),
                            DisplayOrder = 1,
                            Question = "What is the normal fetal weight at 12 weeks?",
                            UpdatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3504)
                        },
                        new
                        {
                            Id = 2,
                            Answer = "During the first 28 weeks, visits are typically scheduled every 4 weeks. Between 28-36 weeks, every 2-3 weeks. After 36 weeks, weekly visits are recommended.",
                            Category = "Prenatal Care",
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3511),
                            DisplayOrder = 2,
                            Question = "How often should I have prenatal check-ups?",
                            UpdatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3510)
                        });
                });

            modelBuilder.Entity("backend.Models.FetalGrowthStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("HeightCm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightGrams")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("FetalGrowthStandards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HeightCm = 1.6m,
                            WeekNumber = 8,
                            WeightGrams = 1m
                        },
                        new
                        {
                            Id = 2,
                            HeightCm = 2.3m,
                            WeekNumber = 9,
                            WeightGrams = 2m
                        },
                        new
                        {
                            Id = 3,
                            HeightCm = 3.1m,
                            WeekNumber = 10,
                            WeightGrams = 4m
                        },
                        new
                        {
                            Id = 4,
                            HeightCm = 4.1m,
                            WeekNumber = 11,
                            WeightGrams = 7m
                        },
                        new
                        {
                            Id = 5,
                            HeightCm = 5.4m,
                            WeekNumber = 12,
                            WeightGrams = 14m
                        },
                        new
                        {
                            Id = 6,
                            HeightCm = 7.4m,
                            WeekNumber = 13,
                            WeightGrams = 23m
                        },
                        new
                        {
                            Id = 7,
                            HeightCm = 8.7m,
                            WeekNumber = 14,
                            WeightGrams = 43m
                        },
                        new
                        {
                            Id = 8,
                            HeightCm = 10.1m,
                            WeekNumber = 15,
                            WeightGrams = 70m
                        },
                        new
                        {
                            Id = 9,
                            HeightCm = 11.6m,
                            WeekNumber = 16,
                            WeightGrams = 100m
                        },
                        new
                        {
                            Id = 10,
                            HeightCm = 13.0m,
                            WeekNumber = 17,
                            WeightGrams = 140m
                        },
                        new
                        {
                            Id = 11,
                            HeightCm = 14.2m,
                            WeekNumber = 18,
                            WeightGrams = 190m
                        },
                        new
                        {
                            Id = 12,
                            HeightCm = 15.3m,
                            WeekNumber = 19,
                            WeightGrams = 240m
                        },
                        new
                        {
                            Id = 13,
                            HeightCm = 16.4m,
                            WeekNumber = 20,
                            WeightGrams = 300m
                        },
                        new
                        {
                            Id = 14,
                            HeightCm = 25.6m,
                            WeekNumber = 21,
                            WeightGrams = 360m
                        },
                        new
                        {
                            Id = 15,
                            HeightCm = 27.8m,
                            WeekNumber = 22,
                            WeightGrams = 430m
                        },
                        new
                        {
                            Id = 16,
                            HeightCm = 28.9m,
                            WeekNumber = 23,
                            WeightGrams = 501m
                        },
                        new
                        {
                            Id = 17,
                            HeightCm = 30.0m,
                            WeekNumber = 24,
                            WeightGrams = 600m
                        },
                        new
                        {
                            Id = 18,
                            HeightCm = 34.6m,
                            WeekNumber = 25,
                            WeightGrams = 660m
                        },
                        new
                        {
                            Id = 19,
                            HeightCm = 35.6m,
                            WeekNumber = 26,
                            WeightGrams = 760m
                        },
                        new
                        {
                            Id = 20,
                            HeightCm = 36.6m,
                            WeekNumber = 27,
                            WeightGrams = 875m
                        },
                        new
                        {
                            Id = 21,
                            HeightCm = 37.6m,
                            WeekNumber = 28,
                            WeightGrams = 1005m
                        },
                        new
                        {
                            Id = 22,
                            HeightCm = 38.6m,
                            WeekNumber = 29,
                            WeightGrams = 1153m
                        },
                        new
                        {
                            Id = 23,
                            HeightCm = 39.9m,
                            WeekNumber = 30,
                            WeightGrams = 1319m
                        },
                        new
                        {
                            Id = 24,
                            HeightCm = 41.1m,
                            WeekNumber = 31,
                            WeightGrams = 1502m
                        },
                        new
                        {
                            Id = 25,
                            HeightCm = 42.4m,
                            WeekNumber = 32,
                            WeightGrams = 1702m
                        },
                        new
                        {
                            Id = 26,
                            HeightCm = 43.7m,
                            WeekNumber = 33,
                            WeightGrams = 1918m
                        },
                        new
                        {
                            Id = 27,
                            HeightCm = 45.0m,
                            WeekNumber = 34,
                            WeightGrams = 2146m
                        },
                        new
                        {
                            Id = 28,
                            HeightCm = 46.2m,
                            WeekNumber = 35,
                            WeightGrams = 2383m
                        },
                        new
                        {
                            Id = 29,
                            HeightCm = 47.4m,
                            WeekNumber = 36,
                            WeightGrams = 2622m
                        },
                        new
                        {
                            Id = 30,
                            HeightCm = 48.6m,
                            WeekNumber = 37,
                            WeightGrams = 2859m
                        },
                        new
                        {
                            Id = 31,
                            HeightCm = 49.8m,
                            WeekNumber = 38,
                            WeightGrams = 3083m
                        },
                        new
                        {
                            Id = 32,
                            HeightCm = 50.7m,
                            WeekNumber = 39,
                            WeightGrams = 3288m
                        },
                        new
                        {
                            Id = 33,
                            HeightCm = 51.2m,
                            WeekNumber = 40,
                            WeightGrams = 3462m
                        });
                });

            modelBuilder.Entity("backend.Models.FetalMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HeightCm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightGrams")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("FetalMeasurements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3480),
                            HeightCm = 25.5m,
                            ProfileId = 1,
                            Week = 12,
                            WeightGrams = 500.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3483),
                            HeightCm = 28.5m,
                            ProfileId = 1,
                            Week = 16,
                            WeightGrams = 650.00m
                        });
                });

            modelBuilder.Entity("backend.Models.GrowthAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlertMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("GrowthAlerts");
                });

            modelBuilder.Entity("backend.Models.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("backend.Models.MembershipPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MembershipPlans");
                });

            modelBuilder.Entity("backend.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<bool>("Sender")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MemberId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("backend.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VnpayResponseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VnpayToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VnpayTransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "I'm excited to share my journey through the first trimester...",
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3535),
                            Status = "published",
                            Title = "My First Pregnancy Experience",
                            UpdatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3532),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.PregnancyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConceptionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PregnancyStatus")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(20)")
                        .HasComputedColumnSql("CAST(CASE WHEN GETDATE() < DueDate THEN 'On Going' ELSE 'Completed' END AS nvarchar(20))", false);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PregnancyProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConceptionDate = new DateTime(2024, 12, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3438),
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3447),
                            DueDate = new DateTime(2025, 9, 10, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3446),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.Models.ScheduledEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduledEmails");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3202),
                            Email = "1@gmail.com",
                            Password = "111111",
                            Status = "active",
                            UserType = "1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 14, 22, 19, 14, 719, DateTimeKind.Local).AddTicks(3206),
                            Email = "2@gmail.com",
                            Password = "222222",
                            Status = "active",
                            UserType = "5"
                        });
                });

            modelBuilder.Entity("backend.Models.Appointment", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.HasOne("backend.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.FetalMeasurement", b =>
                {
                    b.HasOne("backend.Models.PregnancyProfile", "Profile")
                        .WithMany("FetalMeasurements")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("backend.Models.GrowthAlert", b =>
                {
                    b.HasOne("backend.Models.FetalMeasurement", "FetalMeasurement")
                        .WithMany("GrowthAlerts")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FetalMeasurement");
                });

            modelBuilder.Entity("backend.Models.Membership", b =>
                {
                    b.HasOne("backend.Models.MembershipPlan", "Plan")
                        .WithMany("Memberships")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Message", b =>
                {
                    b.HasOne("backend.Models.User", "Doctor")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "Member")
                        .WithMany("SentMessages")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("backend.Models.Payment", b =>
                {
                    b.HasOne("backend.Models.Membership", "Membership")
                        .WithOne("Payment")
                        .HasForeignKey("backend.Models.Payment", "MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.PregnancyProfile", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("PregnancyProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.FetalMeasurement", b =>
                {
                    b.Navigation("GrowthAlerts");
                });

            modelBuilder.Entity("backend.Models.Membership", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("backend.Models.MembershipPlan", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("backend.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("backend.Models.PregnancyProfile", b =>
                {
                    b.Navigation("FetalMeasurements");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Comments");

                    b.Navigation("Memberships");

                    b.Navigation("Posts");

                    b.Navigation("PregnancyProfiles");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
